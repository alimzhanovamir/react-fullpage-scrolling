{"version":3,"sources":["components/dots/dots.module.scss","components/slider/slider.module.scss","components/slide/slide.module.scss","components/slide/slide.jsx","components/dots/dots.jsx","components/slider/slider.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Slide","props","className","cls","children","Dots","slidesCount","currentSlide","setSlide","catchChildState","useState","activeButton","setActiveButton","dots","i","push","useEffect","map","id","onClick","aria-label","Slider","childSetState","timeout","sliderInnerRef","useRef","wheelScrollCount","setTransform","current","style","cssText","wheel","e","direction","Math","sign","deltaY","clearTimeout","setTimeout","window","addEventListener","removeEventListener","console","log","ref","classModifier","setState","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,IAAM,kBAAkB,YAAc,0BAA0B,sBAAsB,oC,gBCAlID,EAAOC,QAAU,CAAC,OAAS,uBAAuB,cAAgB,gC,kBCAlED,EAAOC,QAAU,CAAC,MAAQ,uB,gMCEbC,EAAQ,SAACC,GACpB,OACE,yBAAKC,UAAWC,IAAG,OAChBF,EAAMG,W,uBCHAC,EAAO,SAAC,GAInB,IAJ+E,IAA3DC,EAA0D,EAA1DA,YAAaC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,gBAAqB,EACtCC,mBAASH,GAD6B,mBACvEI,EADuE,KACzDC,EADyD,KAExEC,EAAO,GAEJC,EAAI,EAAGA,EAAIR,EAAaQ,IAC/BD,EAAKE,KAAKD,GAQZ,OALAE,qBAAW,WACTP,EAAgBG,KACf,IAIF,wBAAIV,UAAWC,IAAG,MAChBU,EAAKI,KAAK,SAAAC,GAAE,OACX,wBAAIhB,UAAWC,IAAG,KAChB,4BACED,UAAS,UAAKC,IAAG,YAAR,YAA2BQ,IAAiBO,EAAKf,IAAI,uBAAyB,IACvFgB,QAAS,WACPX,EAASU,GACTN,EAAgBM,IAElBE,aAAA,0KAA6CF,EAAG,WCrB7CG,EAAS,WACpB,IAOIC,EACAC,EAPEC,EAAiBC,iBAAO,MAE1BC,EAAmB,EAGnBnB,EAAe,EASboB,EAAe,SAACrB,EAAaC,GACjCiB,EAAeI,QAAQC,MAAMC,QAA7B,iCAAkE,IAAMxB,EAAcC,EAAtF,OAIIwB,EAAQ,SAAAC,GAEZN,IAEA,IAAMO,EAAYC,KAAKC,KAAKH,EAAEI,QAEzBH,EAAY,GAAK1B,EAAe,EA1BnB,GA0BsCmB,EArB3B,GAsB3BnB,GAA8B,EAE9BmB,EAAmB,GAGXO,EAAY,GAAK1B,EAAe,GAAKmB,EA3BlB,IA4B3BnB,GAA8B,EAE9BmB,EAAmB,GAGhBH,GACHc,aAAad,GAIfA,EAAUe,YAAY,WAEpBZ,EAAmB,IAzCH,KA6ClBC,EAjDkB,EAiDQpB,GAE1Be,EAAcf,IAgBhB,OALAS,qBAAU,WAER,OADAuB,OAAOC,iBAAiB,QAAST,GAC1B,kBAAMQ,OAAOE,oBAAoB,QAASV,MACjD,IAGA,oCACGW,QAAQC,IAAI,UACb,yBAAKzC,UAAWC,IAAG,QACjB,yBACED,UAAWC,IAAG,cACdyC,IAAKpB,GACL,kBAAC,EAAD,CAAOqB,eAAa,GAClB,mCAEF,kBAAC,EAAD,CAAOA,eAAa,GAClB,mCAEF,kBAAC,EAAD,CAAOA,eAAa,GAClB,qCAKN,kBAAC,EAAD,CACEvC,YAvFc,EAwFdC,aAAcA,EACdC,SAlCW,SAAAU,GACfS,EAxDkB,EAwDQT,IAkCtBT,gBAhFkB,SAAAqC,GACtBxB,EAAgBwB,OCPLC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.9f6ab331.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dots\":\"dots_dots__2FtvK\",\"dot\":\"dots_dot__25kUY\",\"dot__button\":\"dots_dot__button__298DF\",\"dot__button--active\":\"dots_dot__button--active__BjbdS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"slider_slider__3XFgR\",\"slider__inner\":\"slider_slider__inner__3HhNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slide\":\"slide_slide__30plI\"};","import React from 'react';\r\nimport cls from './slide.module.scss';\r\n\r\nexport const Slide = (props) => {\r\n  return (\r\n    <div className={cls['slide']}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport cls from './dots.module.scss';\r\n\r\nexport const Dots = ({slidesCount, currentSlide, setSlide, catchChildState}) => {\r\n  const [activeButton, setActiveButton] = useState(currentSlide);\r\n  const dots = [];\r\n  \r\n  for (let i = 0; i < slidesCount; i++) {\r\n    dots.push(i);\r\n  }\r\n\r\n  useEffect( ()=> {\r\n    catchChildState(setActiveButton);\r\n  }, [])\r\n\r\n  \r\n  return (\r\n   <ul className={cls['dots']}>\r\n    {dots.map( id => (\r\n      <li className={cls['dot']}>\r\n        <button\r\n          className={`${cls['dot__button']} ${activeButton === id ? cls['dot__button--active'] : ''}`}\r\n          onClick={() => {\r\n            setSlide(id);\r\n            setActiveButton(id)\r\n          }}\r\n          aria-label={`Переключить на страницу номер ${id+1}`}\r\n          ></button>\r\n      </li>\r\n    ))}\r\n   </ul>\r\n  );\r\n}","import React, { useState, useEffect, useRef } from 'react';\r\nimport cls from './slider.module.scss';\r\nimport { Slide } from '../slide/slide';\r\nimport { Dots } from '../dots/dots';\r\n\r\nexport const Slider = () => {\r\n  const slidesCount = 3;\r\n  const sliderInnerRef = useRef(null);\r\n  \r\n  let wheelScrollCount = 0;\r\n  const scrollDelay = 300;\r\n  const neededWheelScrollCount = 3\r\n  let currentSlide = 0;\r\n  let childSetState;\r\n  let timeout;\r\n\r\n  const catchChildState = setState => {\r\n    childSetState = setState;\r\n  }\r\n\r\n  // Переключение слайдов\r\n  const setTransform = (slidesCount, currentSlide) => {\r\n    sliderInnerRef.current.style.cssText = `transform: translateY(-${ 100 / slidesCount * currentSlide }%)`\r\n  }\r\n\r\n  // Колбэк события прокрутки\r\n  const wheel = e => {\r\n    // Инкременентируем количество прокруток\r\n    wheelScrollCount++;\r\n    \r\n    const direction = Math.sign(e.deltaY);\r\n    \r\n    if ( direction > 0 && currentSlide + 1 < slidesCount && wheelScrollCount > neededWheelScrollCount) {\r\n      currentSlide = currentSlide + 1\r\n      // Делаем сброс кол-ва прокруток как только произошло событие переключения\r\n      wheelScrollCount = 0;\r\n    }\r\n\r\n    else if ( direction < 0 && currentSlide > 0 && wheelScrollCount > neededWheelScrollCount) {\r\n      currentSlide = currentSlide - 1\r\n      // Делаем сброс кол-ва прокруток как только произошло событие переключения\r\n      wheelScrollCount = 0;\r\n    }\r\n\r\n    if ( timeout ) {\r\n      clearTimeout(timeout);\r\n    }\r\n\r\n    // Сброс количества прокруток\r\n    timeout = setTimeout( () => {\r\n      // Делаем сброс кол-ва прокруток, если вышел таймаут\r\n      wheelScrollCount = 0;\r\n    }, scrollDelay);\r\n\r\n    // Пееключить слайд\r\n    setTransform(slidesCount, currentSlide);\r\n    // Изменить стейт компонента Dots, задать значение текущего слайда\r\n    childSetState(currentSlide);\r\n  }\r\n\r\n  // Колбэк события клика на точки\r\n  const setSlide = id => {\r\n    setTransform(slidesCount, id);\r\n  }\r\n\r\n  /* Жизненный цикл \"монтирован\"\r\n   * Добавляем слушатель на window\r\n   */ \r\n  useEffect(() => {\r\n    window.addEventListener('wheel', wheel);\r\n    return () => window.removeEventListener('wheel', wheel);\r\n  },[]);\r\n\r\n  return (\r\n    <>\r\n      {console.log('render')}\r\n      <div className={cls['slider']}>\r\n        <div\r\n          className={cls['slider__inner']}\r\n          ref={sliderInnerRef}>\r\n          <Slide classModifier>\r\n            <div>1</div>\r\n          </Slide>\r\n          <Slide classModifier>\r\n            <div>2</div>\r\n          </Slide>\r\n          <Slide classModifier>\r\n            <div>3</div>\r\n          </Slide>\r\n        </div>\r\n      </div>\r\n\r\n      <Dots\r\n        slidesCount={slidesCount}\r\n        currentSlide={currentSlide}\r\n        setSlide={setSlide}\r\n        catchChildState={catchChildState}\r\n        />\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport './App.module.scss';\r\nimport { Slider } from './components/slider/slider';\r\n\r\nfunction App() {\r\n  return (\r\n    <Slider/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}